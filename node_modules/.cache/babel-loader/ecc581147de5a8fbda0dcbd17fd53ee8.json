{"ast":null,"code":"var _jsxFileName = \"/Users/morganjordan/Development/react_apps/morgansjordan/src/components/Dropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dropdown = _ref => {\n  _s();\n\n  let {\n    options,\n    selected,\n    onSelectedChange,\n    label\n  } = _ref;\n  const [open, setOpen] = useState(false);\n  const ref = useRef();\n  useEffect(() => {\n    const onBodyClick = event => {\n      /* if the clicked element was inside the Component, return; \n      otherwise set open to false, closing the dropdown.*/\n      if (ref.current.contains(event.target)) {\n        return;\n      }\n\n      setOpen(false);\n    };\n\n    document.body.addEventListener(\"click\", onBodyClick, {\n      capture: true\n    });\n    return () => {\n      document.body.removeEventListener('click', onBodyClick, {\n        capture: true\n      });\n    };\n  }, []); // empty array means it only runs once, when component is rendered\n\n  const renderedOptions = options.map(option => {\n    if (option.value === selected.value) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item\",\n      onClick: () => {\n        onSelectedChange(option);\n      },\n      children: option.label\n    }, option.value, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ui container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref,\n      className: \"ui form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          width: \"100\",\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => {\n            setOpen(!open);\n          },\n          className: `ui selection dropdown ${open ? 'visible active' : ''}` // if open==true, add vis-act to className\n          ,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"dropdown icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text\",\n            children: selected.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `menu ${open ? 'visible transition' : ''}`,\n            children: renderedOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dropdown, \"wl9VvfhnMVWQ+kCekFjcRPEi3/0=\");\n\n_c = Dropdown;\nexport default Dropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["/Users/morganjordan/Development/react_apps/morgansjordan/src/components/Dropdown.js"],"names":["React","useState","useEffect","useRef","Dropdown","options","selected","onSelectedChange","label","open","setOpen","ref","onBodyClick","event","current","contains","target","document","body","addEventListener","capture","removeEventListener","renderedOptions","map","option","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD;;;AAEA,MAAMC,QAAQ,GAAG,QAAkD;AAAA;;AAAA,MAAjD;AAACC,IAAAA,OAAD;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA,gBAApB;AAAsCC,IAAAA;AAAtC,GAAiD;AAC/D,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAMU,GAAG,GAAGR,MAAM,EAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,WAAW,GAAIC,KAAD,IAAW;AAC3B;AACZ;AACY,UAAIF,GAAG,CAACG,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAAJ,EAAwC;AACpC;AACH;;AACDN,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAPH;;AAQAO,IAAAA,QAAQ,CAACC,IAAT,CAAcC,gBAAd,CAA+B,OAA/B,EAAwCP,WAAxC,EAAqD;AAAEQ,MAAAA,OAAO,EAAE;AAAX,KAArD;AACI,WAAM,MAAM;AACRH,MAAAA,QAAQ,CAACC,IAAT,CAAcG,mBAAd,CAAkC,OAAlC,EAA2CT,WAA3C,EAAwD;AAAEQ,QAAAA,OAAO,EAAE;AAAX,OAAxD;AACH,KAFD;AAGL,GAbM,EAaJ,EAbI,CAAT,CAJ+D,CAiBrD;;AAEV,QAAME,eAAe,GAAGjB,OAAO,CAACkB,GAAR,CAAaC,MAAD,IAAY;AAE5C,QAAIA,MAAM,CAACC,KAAP,KAAiBnB,QAAQ,CAACmB,KAA9B,EAAqC;AACjC,aAAO,IAAP;AACH;;AAED,wBACI;AAEI,MAAA,SAAS,EAAC,MAFd;AAGI,MAAA,OAAO,EAAE,MAAK;AACVlB,QAAAA,gBAAgB,CAACiB,MAAD,CAAhB;AAAyB,OAJjC;AAAA,gBAMKA,MAAM,CAAChB;AANZ,OACSgB,MAAM,CAACC,KADhB;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH,GAhBuB,CAAxB;AAkBA,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,2BACA;AAAK,MAAA,GAAG,EAAEd,GAAV;AAAe,MAAA,SAAS,EAAC,SAAzB;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACI;AAAO,UAAA,SAAS,EAAC,OAAjB;AAAyB,UAAA,KAAK,EAAC,KAA/B;AAAA,oBAAsCH;AAAtC;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,OAAO,EAAE,MAAM;AAEhBE,YAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AAAe,WAFnB;AAIA,UAAA,SAAS,EAAG,yBAAwBA,IAAI,GAAG,gBAAH,GAAsB,EAAG,EAJjE,CAIoE;AAJpE;AAAA,kCAMI;AAAG,YAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,kBANJ,eAOI;AAAK,YAAA,SAAS,EAAC,MAAf;AAAA,sBAAuBH,QAAQ,CAACE;AAAhC;AAAA;AAAA;AAAA;AAAA,kBAPJ,eAQI;AAAK,YAAA,SAAS,EAAG,QAAOC,IAAI,GAAG,oBAAH,GAA0B,EAAG,EAAzD;AAAA,sBACKa;AADL;AAAA;AAAA;AAAA;AAAA,kBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CA1DD;;GAAMlB,Q;;KAAAA,Q;AA4DN,eAAeA,QAAf","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\n\nconst Dropdown = ({options, selected, onSelectedChange, label}) => {\n    const [open, setOpen] = useState(false);\n    const ref = useRef();\n\n    useEffect(() => {\n        const onBodyClick = (event) => {\n            /* if the clicked element was inside the Component, return; \n            otherwise set open to false, closing the dropdown.*/  \n            if (ref.current.contains(event.target)) {\n                return;\n            }\n            setOpen(false); \n          };\n        document.body.addEventListener(\"click\", onBodyClick, { capture: true });\n            return() => {\n                document.body.removeEventListener('click', onBodyClick, { capture: true });\n            }\n      }, []); // empty array means it only runs once, when component is rendered\n\n    const renderedOptions = options.map((option) => {\n        \n        if (option.value === selected.value) {\n            return null;\n        }\n        \n        return (\n            <div \n                key={option.value} \n                className=\"item\" \n                onClick={()=> {\n                    onSelectedChange(option)}\n                }>\n                {option.label}\n            </div>\n        );\n    })\n\n    return (\n        <div className=\"ui container\">\n        <div ref={ref} className=\"ui form\">\n            <div className=\"field\">\n                <label className=\"label\" width=\"100\">{label}</label>\n                <div onClick={() => {\n                   \n                    setOpen(!open)}\n                } \n                className={`ui selection dropdown ${open ? 'visible active' : ''}`} // if open==true, add vis-act to className\n                >\n                    <i className=\"dropdown icon\"></i>\n                    <div className=\"text\">{selected.label}</div>\n                    <div className={`menu ${open ? 'visible transition' : ''}`}>\n                        {renderedOptions}\n                    </div>\n                </div>\n            </div>\n        </div>\n        </div>\n    )\n}\n\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}