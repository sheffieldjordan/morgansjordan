{"ast":null,"code":"import _slicedToArray from\"/Users/morganjordan/Development/react_apps/morgansjordan/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect,useRef}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Dropdown=function Dropdown(_ref){var options=_ref.options,selected=_ref.selected,onSelectedChange=_ref.onSelectedChange,label=_ref.label;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),open=_useState2[0],setOpen=_useState2[1];var ref=useRef();useEffect(function(){var onBodyClick=function onBodyClick(event){/* if the clicked element was inside the Component, return; \n            otherwise set open to false, closing the dropdown.*/if(ref.current.contains(event.target)){return;}setOpen(false);};document.body.addEventListener(\"click\",onBodyClick,{capture:true});return function(){document.body.removeEventListener('click',onBodyClick,{capture:true});};},[]);// empty array means it only runs once, when component is rendered\nvar renderedOptions=options.map(function(option){if(option.value===selected.value){return null;}return/*#__PURE__*/_jsx(\"div\",{className:\"item\",onClick:function onClick(){onSelectedChange(option);},children:option.label},option.value);});return/*#__PURE__*/_jsx(\"div\",{className:\"ui container\",children:/*#__PURE__*/_jsx(\"div\",{ref:ref,className:\"ui form\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"field\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"label\",children:label}),/*#__PURE__*/_jsxs(\"div\",{onClick:function onClick(){setOpen(!open);},className:\"ui selection dropdown \".concat(open?'visible active':'')// if open==true, add vis-act to className\n,children:[/*#__PURE__*/_jsx(\"i\",{className:\"dropdown icon\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text\",children:selected.label}),/*#__PURE__*/_jsx(\"div\",{className:\"menu \".concat(open?'visible transition':''),children:renderedOptions})]})]})})});};export default Dropdown;","map":{"version":3,"sources":["/Users/morganjordan/Development/react_apps/morgansjordan/src/components/Dropdown.js"],"names":["React","useState","useEffect","useRef","Dropdown","options","selected","onSelectedChange","label","open","setOpen","ref","onBodyClick","event","current","contains","target","document","body","addEventListener","capture","removeEventListener","renderedOptions","map","option","value"],"mappings":"8IAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,CAAoCC,MAApC,KAAiD,OAAjD,C,wFAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAkD,IAAhDC,CAAAA,OAAgD,MAAhDA,OAAgD,CAAvCC,QAAuC,MAAvCA,QAAuC,CAA7BC,gBAA6B,MAA7BA,gBAA6B,CAAXC,KAAW,MAAXA,KAAW,CAC/D,cAAwBP,QAAQ,CAAC,KAAD,CAAhC,wCAAOQ,IAAP,eAAaC,OAAb,eACA,GAAMC,CAAAA,GAAG,CAAGR,MAAM,EAAlB,CAEAD,SAAS,CAAC,UAAM,CACZ,GAAMU,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC3B;AACZ,gEACY,GAAIF,GAAG,CAACG,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAAJ,CAAwC,CACpC,OACH,CACDN,OAAO,CAAC,KAAD,CAAP,CACD,CAPH,CAQAO,QAAQ,CAACC,IAAT,CAAcC,gBAAd,CAA+B,OAA/B,CAAwCP,WAAxC,CAAqD,CAAEQ,OAAO,CAAE,IAAX,CAArD,EACI,MAAM,WAAM,CACRH,QAAQ,CAACC,IAAT,CAAcG,mBAAd,CAAkC,OAAlC,CAA2CT,WAA3C,CAAwD,CAAEQ,OAAO,CAAE,IAAX,CAAxD,EACH,CAFD,CAGL,CAbM,CAaJ,EAbI,CAAT,CAaU;AAEV,GAAME,CAAAA,eAAe,CAAGjB,OAAO,CAACkB,GAAR,CAAY,SAACC,MAAD,CAAY,CAE5C,GAAIA,MAAM,CAACC,KAAP,GAAiBnB,QAAQ,CAACmB,KAA9B,CAAqC,CACjC,MAAO,KAAP,CACH,CAED,mBACI,YAEI,SAAS,CAAC,MAFd,CAGI,OAAO,CAAE,kBAAK,CACVlB,gBAAgB,CAACiB,MAAD,CAAhB,CAAyB,CAJjC,UAMKA,MAAM,CAAChB,KANZ,EACSgB,MAAM,CAACC,KADhB,CADJ,CAUH,CAhBuB,CAAxB,CAkBA,mBACI,YAAK,SAAS,CAAC,cAAf,uBACA,YAAK,GAAG,CAAEd,GAAV,CAAe,SAAS,CAAC,SAAzB,uBACI,aAAK,SAAS,CAAC,OAAf,wBACI,cAAO,SAAS,CAAC,OAAjB,UAA0BH,KAA1B,EADJ,cAEI,aAAK,OAAO,CAAE,kBAAM,CAEhBE,OAAO,CAAC,CAACD,IAAF,CAAP,CAAe,CAFnB,CAIA,SAAS,iCAA2BA,IAAI,CAAG,gBAAH,CAAsB,EAArD,CAA2D;AAJpE,wBAMI,UAAG,SAAS,CAAC,eAAb,EANJ,cAOI,YAAK,SAAS,CAAC,MAAf,UAAuBH,QAAQ,CAACE,KAAhC,EAPJ,cAQI,YAAK,SAAS,gBAAUC,IAAI,CAAG,oBAAH,CAA0B,EAAxC,CAAd,UACKa,eADL,EARJ,GAFJ,GADJ,EADA,EADJ,CAqBH,CA1DD,CA4DA,cAAelB,CAAAA,QAAf","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\n\nconst Dropdown = ({options, selected, onSelectedChange, label}) => {\n    const [open, setOpen] = useState(false);\n    const ref = useRef();\n\n    useEffect(() => {\n        const onBodyClick = (event) => {\n            /* if the clicked element was inside the Component, return; \n            otherwise set open to false, closing the dropdown.*/  \n            if (ref.current.contains(event.target)) {\n                return;\n            }\n            setOpen(false); \n          };\n        document.body.addEventListener(\"click\", onBodyClick, { capture: true });\n            return() => {\n                document.body.removeEventListener('click', onBodyClick, { capture: true });\n            }\n      }, []); // empty array means it only runs once, when component is rendered\n\n    const renderedOptions = options.map((option) => {\n        \n        if (option.value === selected.value) {\n            return null;\n        }\n        \n        return (\n            <div \n                key={option.value} \n                className=\"item\" \n                onClick={()=> {\n                    onSelectedChange(option)}\n                }>\n                {option.label}\n            </div>\n        );\n    })\n\n    return (\n        <div className=\"ui container\">\n        <div ref={ref} className=\"ui form\">\n            <div className=\"field\">\n                <label className=\"label\">{label}</label>\n                <div onClick={() => {\n                   \n                    setOpen(!open)}\n                } \n                className={`ui selection dropdown ${open ? 'visible active' : ''}`} // if open==true, add vis-act to className\n                >\n                    <i className=\"dropdown icon\"></i>\n                    <div className=\"text\">{selected.label}</div>\n                    <div className={`menu ${open ? 'visible transition' : ''}`}>\n                        {renderedOptions}\n                    </div>\n                </div>\n            </div>\n        </div>\n        </div>\n    )\n}\n\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}